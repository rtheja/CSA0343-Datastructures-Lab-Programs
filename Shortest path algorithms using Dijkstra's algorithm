#include <stdio.h> 
#include <limits.h> 
#define MAX_VERTICES 100 
struct Graph { 
int numVertices;int adjMatrix[MAX_VERTICES][MAX_VERTICES]; 
}; 
void initializeGraph(struct Graph* graph, int numVertices) { 
graph->numVertices = numVertices; 
for (int i = 0; i < numVertices; i++) { 
for (int j = 0; j < numVertices; j++) { 
graph->adjMatrix[i][j] = 0;
} 
} 
} 
void addEdge(struct Graph* graph, int src, int dest, int weight) { 
graph->adjMatrix[src][dest] = weight; 
graph->adjMatrix[dest][src] = weight;
} 
int minDistance(int dist[], int visited[], int numVertices) { 
int min = INT_MAX, minIndex; 
for (int v = 0; v < numVertices; v++) { 
if (!visited[v] && dist[v] <= min) { 
min = dist[v]; 
minIndex = v; 
} 
} 
return minIndex; 
} 
void dijkstra(struct Graph* graph, int src) { 
int dist[MAX_VERTICES]; 
int visited[MAX_VERTICES]; 
for (int i = 0; i < graph->numVertices; i++) { 
dist[i] = INT_MAX; 
visited[i] = 0; 
} 
dist[src] = 0; 
for (int count = 0; count < graph->numVertices - 1; count++) { 
int u = minDistance(dist, visited, graph->numVertices); 
visited[u] = 1;for (int v = 0; v < graph->numVertices; v++) { 
if (!visited[v] && graph->adjMatrix[u][v] && dist[u] != INT_MAX && 
dist[u] + graph->adjMatrix[u][v] < dist[v]) { 
dist[v] = dist[u] + graph->adjMatrix[u][v]; 
} 
} 
} 
printf("Vertex Distance from Source\n"); 
for (int i = 0; i < graph->numVertices; i++) { 
printf("%d %d\n", i, dist[i]); 
} 
} 
int main() { 
struct Graph graph; 
int numVertices, numEdges; 
printf("Enter the number of vertices: "); 
scanf("%d", &numVertices); 
printf("Enter the number of edges: "); 
scanf("%d", &numEdges); 
initializeGraph(&graph, numVertices); 
printf("Enter edges and weights (source destination weight):\n"); 
for (int i = 0; i < numEdges; i++) { 
int src, dest, weight; 
scanf("%d %d %d", &src, &dest, &weight); 
addEdge(&graph, src, dest, weight); 
} 
int startVertex; 
printf("Enter the starting vertex for Dijkstra's algorithm: "); 
scanf("%d", &startVertex); 
dijkstra(&graph, startVertex); 
return 0; 
}
